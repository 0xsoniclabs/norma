// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go
//
// Generated by this command:
//
//	mockgen -source validator.go -destination validator_mock.go -package network
//

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	rpc "github.com/0xsoniclabs/norma/driver/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockValidatorRegistrar is a mock of ValidatorRegistrar interface.
type MockValidatorRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorRegistrarMockRecorder
	isgomock struct{}
}

// MockValidatorRegistrarMockRecorder is the mock recorder for MockValidatorRegistrar.
type MockValidatorRegistrarMockRecorder struct {
	mock *MockValidatorRegistrar
}

// NewMockValidatorRegistrar creates a new mock instance.
func NewMockValidatorRegistrar(ctrl *gomock.Controller) *MockValidatorRegistrar {
	mock := &MockValidatorRegistrar{ctrl: ctrl}
	mock.recorder = &MockValidatorRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorRegistrar) EXPECT() *MockValidatorRegistrarMockRecorder {
	return m.recorder
}

// RegisterValidatorNode mocks base method.
func (m *MockValidatorRegistrar) RegisterValidatorNode(backend ContractBackend) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterValidatorNode", backend)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterValidatorNode indicates an expected call of RegisterValidatorNode.
func (mr *MockValidatorRegistrarMockRecorder) RegisterValidatorNode(backend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterValidatorNode", reflect.TypeOf((*MockValidatorRegistrar)(nil).RegisterValidatorNode), backend)
}

// UnregisterValidatorNode mocks base method.
func (m *MockValidatorRegistrar) UnregisterValidatorNode(client rpc.Client, validatorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterValidatorNode", client, validatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterValidatorNode indicates an expected call of UnregisterValidatorNode.
func (mr *MockValidatorRegistrarMockRecorder) UnregisterValidatorNode(client, validatorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterValidatorNode", reflect.TypeOf((*MockValidatorRegistrar)(nil).UnregisterValidatorNode), client, validatorId)
}
