// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go
//
// Generated by this command:
//
//	mockgen -source executor.go -destination executor_mock.go -package executor
//

// Package executor is a generated GoMock package.
package executor

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockevent is a mock of event interface.
type Mockevent struct {
	ctrl     *gomock.Controller
	recorder *MockeventMockRecorder
	isgomock struct{}
}

// MockeventMockRecorder is the mock recorder for Mockevent.
type MockeventMockRecorder struct {
	mock *Mockevent
}

// NewMockevent creates a new mock instance.
func NewMockevent(ctrl *gomock.Controller) *Mockevent {
	mock := &Mockevent{ctrl: ctrl}
	mock.recorder = &MockeventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockevent) EXPECT() *MockeventMockRecorder {
	return m.recorder
}

// name mocks base method.
func (m *Mockevent) name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "name")
	ret0, _ := ret[0].(string)
	return ret0
}

// name indicates an expected call of name.
func (mr *MockeventMockRecorder) name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "name", reflect.TypeOf((*Mockevent)(nil).name))
}

// run mocks base method.
func (m *Mockevent) run() ([]event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run")
	ret0, _ := ret[0].([]event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// run indicates an expected call of run.
func (mr *MockeventMockRecorder) run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*Mockevent)(nil).run))
}

// time mocks base method.
func (m *Mockevent) time() Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "time")
	ret0, _ := ret[0].(Time)
	return ret0
}

// time indicates an expected call of time.
func (mr *MockeventMockRecorder) time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "time", reflect.TypeOf((*Mockevent)(nil).time))
}

// MockvalidatorRegistry is a mock of validatorRegistry interface.
type MockvalidatorRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockvalidatorRegistryMockRecorder
	isgomock struct{}
}

// MockvalidatorRegistryMockRecorder is the mock recorder for MockvalidatorRegistry.
type MockvalidatorRegistryMockRecorder struct {
	mock *MockvalidatorRegistry
}

// NewMockvalidatorRegistry creates a new mock instance.
func NewMockvalidatorRegistry(ctrl *gomock.Controller) *MockvalidatorRegistry {
	mock := &MockvalidatorRegistry{ctrl: ctrl}
	mock.recorder = &MockvalidatorRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvalidatorRegistry) EXPECT() *MockvalidatorRegistryMockRecorder {
	return m.recorder
}

// registerNewValidator mocks base method.
func (m *MockvalidatorRegistry) registerNewValidator() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "registerNewValidator")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// registerNewValidator indicates an expected call of registerNewValidator.
func (mr *MockvalidatorRegistryMockRecorder) registerNewValidator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerNewValidator", reflect.TypeOf((*MockvalidatorRegistry)(nil).registerNewValidator))
}

// unregisterValidator mocks base method.
func (m *MockvalidatorRegistry) unregisterValidator(validatorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "unregisterValidator", validatorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// unregisterValidator indicates an expected call of unregisterValidator.
func (mr *MockvalidatorRegistryMockRecorder) unregisterValidator(validatorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unregisterValidator", reflect.TypeOf((*MockvalidatorRegistry)(nil).unregisterValidator), validatorId)
}
